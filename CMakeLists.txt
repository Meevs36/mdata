# Author -- Meevs
# Creation Date -- Wed Dec  1 05:51:34 2021
# File Name -- CMakeLists.txt
# Notes --
#     -- 2021-12-25 -- Version updates can now be tracked via the version.md file
#     -- 2022-11-15 -- Overhaul to cmake file to better allow control over which modules are included in the final build.
#                      This CMake file now better supports the changing of the installation prefix if the end-user decides to change the installation location

cmake_minimum_required (VERSION 3.16)

project (mdata VERSION 0.2.7)


# Determine which modules will be included in the build
set (${MDATA_SOURCES} "")
option (ENABLE_LINKY "Sets whether or not the Linky module will be enabled in the build" TRUE)
option (ENABLE_STACKY "Sets whether or not the Stacky module will be enabled in the build" TRUE)
option (ENABLE_QUEUE "Sets whether or not the Queue module will be enabled in the build" TRUE)
option (ENABLE_BT "Sets whether or not the Binary Tree module will be enabled in the build" TRUE)

# Include Linky module if enabled
if (${ENABLE_LINKY})
  list (APPEND MDATA_SOURCES $<TARGET_OBJECTS:linky>)
endif ()

# Include Stacky module if enabled
if (${ENABLE_STACKY})
  list (APPEND MDATA_SOURCES $<TARGET_OBJECTS:stacky>)
endif ()

# Include Queue module if enabled
if (${ENABLE_QUEUE})
  list (APPEND MDATA_SOURCES $<TARGET_OBJECTS:queue>)
endif ()

# Include Binary Tree module if enabled
if (${ENABLE_BT})
  list (APPEND MDATA_SOURCES $<TARGET_OBJECTS:binaryTree>)
endif ()

# This is required to allow Valgrind to read the executables generated by Clang. This might be 
add_compile_options(-gdwarf-4)

add_library (mdata
	SHARED
	${MDATA_SOURCES}
)

add_subdirectory (inc)
add_subdirectory (src)

target_include_directories (mdata
  PRIVATE
  ${CMAKE_SOURCE_DIR}/inc/
  ${CMAKE_SOURCE_DIR}/inc/linky/
  ${CMAKE_SOURCE_DIR}/inc/stacky/
  ${CMAKE_SOURCE_DIR}/inc/queue/
  ${CMAKE_SOURCE_DIR}/inc/binaryTree/
)

target_link_directories (mdata
  PRIVATE
  ${CMAKE_SOURCE_DIR}/lib/
  )

install (TARGETS mdata)

# Uninstall target for easy removal from host system
add_custom_target (uninstall
  COMMAND xargs rm < install_manifest.txt 
)

# Added custom target to allow for easy, seperate compilation of all unit tests
add_custom_target (mtests
  COMMENT Compiling test suites
)

# Enable unit testing to confirm use cases
enable_testing ()
set (VALGRIND_ARGS --leak-check=full --error-exitcode=1 --exit-on-first-error=yes)
if (${ENABLE_LINKY})
  add_dependencies (mtests mdataLinkyTest)
  add_test (NAME linkyTest COMMAND ${CMAKE_BINARY_DIR}/src/test/linky/mdataLinkyTest) # Testing for the Linky module
  add_test (NAME linkyValgrindTest COMMAND valgrind ${VALGRIND_ARGS} ${CMAKE_BINARY_DIR}/src/test/linky/mdataLinkyTest)
endif ()
if (${ENABLE_STACKY})
  add_dependencies (mtests mdataStackyTest)
  add_test (NAME stackyTest COMMAND src/test/stacky/mdataStackyTest) # Testing for the Stacky module
  add_test (NAME stackyValgrindTest COMMAND valgrind ${VALGRIND_ARGS} ${CMAKE_BINARY_DIR}/src/test/stacky/mdataStackyTest)
endif ()
if (${ENABLE_QUEUE})
  add_dependencies (mtests mdataQueueTest)
  add_test (NAME queueTest COMMAND src/test/queue/mdataQueueTest) # Testing for the Queue module
  add_test (NAME queueValgrindTest COMMAND valgrind ${VALGRIND_ARGS} ${CMAKE_BINARY_DIR}/src/test/queue/mdataQueueTest)
endif ()
if (${ENABLE_BT})
  add_dependencies (mtests mdataBinaryTreeTest)
  add_test (NAME binaryTreeTest COMMAND src/test/binaryTree/mdataBinaryTreeTest) # Testing for the Binary Tree module
  add_test (NAME binaryTreeValgrindTest COMMAND valgrind ${VALGRIND_ARGS} ${CMAKE_BINARY_DIR}/src/test/binaryTree/mdataBinaryTreeTest)
endif ()
